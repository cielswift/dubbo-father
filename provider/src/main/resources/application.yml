server:
  port: 2300
  servlet:
    context-path: /provider

spring:
  application:
    name: boot-provider
  servlet:
    multipart:
      max-request-size: 10MB
      max-file-size: 5MB
  http:
    encoding:
      charset: UTF-8
      enabled: true
  resources:
    static-locations: classpath:/static/ #配置静态资源路径,隔开多个
  thymeleaf:
    prefix: classpath:/templates/  #模板路径
    suffix: .html
    mode: html5
    encoding: utf-8
    servlet:
      content-type: text/html
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql.ciel.cl:1600/ssh-data?seUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
    username: root
    password: ciel
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 初始化，最小，最大连接数
      initialSize: 5
      minidle: 5
      maxActive: 30
      # 获取数据库连接等待的超时时间
      maxWait: 20000
      # 配置多久进行一次检测，检测需要关闭的空闲连接 单位毫秒
      timeBetweenEvictionRunsMillis: 50000
      validationQuery: SELECT 1 FROM dual
      # 配置监控统计拦截的filters,去掉后，监控界面的sql无法统计
      #filters: stat,wall,log4j

  redis:
    host: redis.ciel.cl
    port: 6500

  profiles:
    include: filed,alipay #引入其他配置文件,多个用,隔开
    active: dev  # 激活dev模式

  rabbitmq:
    host: 127.0.0.1 #rabbitMQ
    port: 5672
    username: ciel
    password: c
    virtual-host: /
#  elasticsearch:  #搜索模块 ,jeds模式
#    jest:
#      uris: http://127.0.0.1:9200
  data:
    elasticsearch:  #spring-data 模式
      cluster-name: elasticsearch
      cluster-nodes: 127.0.0.1:9300
      repositories:
        enabled: true
  mail:
    username: 15966504931@163.com #邮箱账户
    password: cielswift202 #授权码
    host: smtp.163.com
    #properties: {mail.smtp.ssl.enable:true}
  aop:
    proxy-target-class: true #使用cglib代理

    #kafka
  kafka:
    # 指定kafka server的地址，集群配多个，中间，逗号隔开
    bootstrap-servers: 127.0.0.1:9920,127.0.0.1:9921,127.0.0.1:9922


    # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
    # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
    producer:
      retries: 0
      batch-size: 16384   # 每次批量发送消息的数量,produce积累到一定数据，一次发送
      buffer-memory: 33554432 # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
      acks: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
  #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
  #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
  #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
  #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
  #可以设置的值为：all, -1, 0, 1

  # 指定消息key和消息体的编解码方式

    consumer:
      group-id: ciel-group # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
      # smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
      auto-offset-reset: earliest
      enable-auto-commit: true # enable.auto.commit:true --> 设置自动提交offset
      auto-commit-interval: 100 #如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000
      # 指定消息key和消息体的编解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer





mybatis-plus:
  mapper-locations: classpath:mapper/*Crud.xml
  typeAliasesPackage: com.ciel.pojo  #实体扫描
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #打印sql
    map-underscore-to-camel-case: true #数据库下划线转换
  global-config:
    db-config:
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
      updateStrategy: NOT_NULL  #为null 不更新
      insertStrategy: NOT_NULL
      selectStrategy: NOT_NULL

logging:
  config: classpath:logback-spring.xml

fileUpload:
  img:
    user: C:/CustomSoftware/Nginx-Cluster/nginx-1.16.1/static/img/user/
fileRequest:
  img:
    user: http://nginx.ciel.cl/img/user/

xpx:
  name: xiapeixin  #自定义启动器
  height: 999.8

#dubbo:
#  application:
#    name: app-provider  #服务名称
#  registry:
#    address: 127.0.0.1:2181 #注册中心地址
#    protocol: zookeeper
#  protocol:
#    name: dubbo  #通信规则
#    port: 20880  #通信端口
#  monitor:
#    protocol: registry
#  provider: #统一提供者设置
#    version: 1.0 #声明版本

