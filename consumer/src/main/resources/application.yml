spring:
  application:
    name: boot-consumer
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://mysql.ciel.cl:1601/ssh-data?seUnicode=true&characterEncoding=UTF-8&useSSL=false&serverTimezone=Asia/Shanghai
    username: root
    password: ciel
    type: com.alibaba.druid.pool.DruidDataSource
  redis:
    host: redis.ciel.cl
    port: 6379
  profiles:
    active: dev #多文档模式, 这里是激活dev模式

  kafka:
    # 指定kafka server的地址，集群配多个，中间，逗号隔开
    bootstrap-servers: hadoop.master:9920,hadoop.slave1:9920,hadoop.slave2:9920

    # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
    # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
    producer:
      retries: 0
      batch-size: 16384   # 每次批量发送消息的数量,produce积累到一定数据，一次发送
      buffer-memory: 33554432 # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
      acks: 1
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
    #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
    #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
    #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
    #可以设置的值为：all, -1, 0, 1

    # 指定消息key和消息体的编解码方式
    
    consumer:
      group-id: ciel-group # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名

      #earliest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      #latest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      #none topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: earliest
      enable-auto-commit: true # enable.auto.commit:true --> 设置自动提交offset
      auto-commit-interval: 100 #如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000
      # 指定消息key和消息体的编解码方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer


mybatis-plus:profiles:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      logic-delete-value: 1 # 逻辑已删除值(默认为 1)
      logic-not-delete-value: 0 # 逻辑未删除值(默认为 0)
      updateStrategy: NOT_NULL  #为null 不更新
dubbo:
  application:
    name: app-consumer  #服务名称
  registry:
    address: hadoop.master:21810,hadoop.slave1:21810,hadoop.slave2:21810 #注册中心地址
    protocol: zookeeper
    check: false  #启动不检查注册中心
#  protocol:
#    name: dubbo  #通信规则
#    port: 20881  #通信端口
#  monitor:
#    protocol: registry
  consumer:    #统一配置消费者
    check: false #启动不检查提供者
    timeout: 3000 #设置超时时间,3秒不响应就关闭
    retries: 3 #重试次数  不算第一次,也就是是第1次调用失败后,剩余3次次数
    version: 1.0  #使用哪一个版本的服务, * 调用任意一个版本
    #stub: com.ciel.consumer.service.root.AppLoaclRoot  #指定本地存根
    loadbalance: roundrobin #负载均衡机制 roundrobin轮询, LeastActive最少活跃,ConsistentHash 一致哈希,Random 随机

logging:
  config: classpath:logback-spring.xml

---
#多文档模式
server:
  port: 1301
  servlet:
    context-path: /consumers
spring:
  profiles: dev #多文档模式, 这里是prod模式
---
    #多文档模式
server:
  port: 1309
  servlet:
    context-path: /consumer
spring:
  profiles: prod #多文档模式, 这里是prod模式
